{"ast":null,"code":"import _classCallCheck from \"/home/danibella/Desktop/MIS PROYECTOS PERSONALES/APP_REACT/platzi-badges/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/danibella/Desktop/MIS PROYECTOS PERSONALES/APP_REACT/platzi-badges/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/danibella/Desktop/MIS PROYECTOS PERSONALES/APP_REACT/platzi-badges/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/danibella/Desktop/MIS PROYECTOS PERSONALES/APP_REACT/platzi-badges/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/danibella/Desktop/MIS PROYECTOS PERSONALES/APP_REACT/platzi-badges/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/danibella/Desktop/MIS PROYECTOS PERSONALES/APP_REACT/platzi-badges/src/components/badgeform.js\";\nimport React from 'react';\n/*\n\nNOTA IMPORTANTE: SetState funciona para ESCRIBIR ESTADOS\ny state solito sirve para poder LEER ESTADOS\n\nCADA UNO DE NUESTROS INPUTS HASTA EL MOMENTO SOLO TITNE UN TAG name MEJOR DICHO HAY 2 FUENTESDE DE INFO QUE TENDREMOS QUE MANEJRA Y HACER ESTO\nNO E SMUY LEGIBLE ES DECIR TENEMOS LA COPIA DEL INPUT Y DEL SETSTATE PARA ARREGLAR ESTO NO VAMOS A VOLVER HACER UN SETSTATE\nPARA CADA INPIT ES DECIR SOLO VAMSO A LEER EL STATE QUE YA TOMA EL SETSTATE LO SOLUCIONAMOS ASI:\n\n1) TOMANDO CADA INPUT Y AGREGARLE UN TAG value={this.state.FirstName} \ny asi sucesivamnete para cada inpit modificando claramente el tag name\n\n\nOTRA NOTA: TypeError: Cannot read property 'firstname' of null, CUANDO SE GENERA ESTE TIPO DE ERROR ES PORQUE NO HE\nINICIALIZADO MI state para solucionar esto declaro mi state como un objeto vacio;\ny por buenas practicas hare esto como 1ra linea de código dentro de mi bloque\n\nManejo de estado\nHasta esta clase todos los componentes han obtenido su información a través de props que vienen desde afuera\n(otros componentes) pero hay otra manera en la que los componentes pueden producir su propia información y guardarla\npara ser consumida o pasada a otros componentes a través de sus props. La clave está en que la información del state\na otros componentes pasará en una sola dirección y podrá ser consumida pero no modificada.\n\nPara guardar la información en el estado se usa una función de la clase component llamada setState\na la cual se le debe pasar un objeto con la información que se quiere guardar.\nAunque no se ve, la información está siendo guardada en dos sitios. Cada input guarda su propio valor\ny al tiempo la está guardando en setState, lo cual no es ideal. Para solucionarlo hay que modificar\nlos inputs de un estado de no controlados a controlados.\n\n*/\n\nvar BadgeForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(BadgeForm, _React$Component);\n\n  function BadgeForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, BadgeForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(BadgeForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handle_click = function (e) {\n      console.log('click ya!');\n    };\n\n    _this.handle_sub = function (e) {\n      e.preventDefault(); // prevengo que le form se refresco y me borre los datos despúes de hacer click!\n\n      console.log('form was submit!');\n      console.log(_this.state); // aqui imprimiré el estado de los inputs que el user escriba!\n    };\n\n    return _this;\n  }\n\n  _createClass(BadgeForm, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, \"NEW ATTENDANT\"), React.createElement(\"form\", {\n        onSubmit: this.handle_sub,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, \"First Name\"), React.createElement(\"input\", {\n        onChange: this.props.onChange,\n        className: \"form-control\",\n        type: \"text\",\n        name: \"firstname\",\n        value: this.state.firstname,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \"Last Name\"), React.createElement(\"input\", {\n        onChange: this.props.onChange,\n        className: \"form-control\",\n        type: \"text\",\n        name: \"lastname\",\n        value: this.props.lastname,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \"Email\"), React.createElement(\"input\", {\n        onChange: this.props.onChange,\n        className: \"form-control\",\n        type: \"email\",\n        name: \"email\",\n        value: this.state.email,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"Job Title\"), React.createElement(\"input\", {\n        onChange: this.props.onChange,\n        className: \"form-control\",\n        type: \"text\",\n        name: \"jobtitle\",\n        value: this.state.jobtitle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, \"Twitter\"), React.createElement(\"input\", {\n        onChange: this.props.onChange,\n        className: \"form-control\",\n        type: \"text\",\n        name: \"twitter\",\n        value: this.state.twitter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      })), React.createElement(\"buttom\", {\n        onClick: this.handle_click,\n        className: \"btn btn-primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, \"Save\")));\n    }\n  }]);\n\n  return BadgeForm;\n}(React.Component);\n\nexport default BadgeForm;","map":{"version":3,"sources":["/home/danibella/Desktop/MIS PROYECTOS PERSONALES/APP_REACT/platzi-badges/src/components/badgeform.js"],"names":["React","BadgeForm","handle_click","e","console","log","handle_sub","preventDefault","state","props","onChange","firstname","lastname","email","jobtitle","twitter","Component"],"mappings":"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","sourcesContent":["import React from 'react';\n/*\n\nNOTA IMPORTANTE: SetState funciona para ESCRIBIR ESTADOS\ny state solito sirve para poder LEER ESTADOS\n\nCADA UNO DE NUESTROS INPUTS HASTA EL MOMENTO SOLO TITNE UN TAG name MEJOR DICHO HAY 2 FUENTESDE DE INFO QUE TENDREMOS QUE MANEJRA Y HACER ESTO\nNO E SMUY LEGIBLE ES DECIR TENEMOS LA COPIA DEL INPUT Y DEL SETSTATE PARA ARREGLAR ESTO NO VAMOS A VOLVER HACER UN SETSTATE\nPARA CADA INPIT ES DECIR SOLO VAMSO A LEER EL STATE QUE YA TOMA EL SETSTATE LO SOLUCIONAMOS ASI:\n\n1) TOMANDO CADA INPUT Y AGREGARLE UN TAG value={this.state.FirstName} \ny asi sucesivamnete para cada inpit modificando claramente el tag name\n\n\nOTRA NOTA: TypeError: Cannot read property 'firstname' of null, CUANDO SE GENERA ESTE TIPO DE ERROR ES PORQUE NO HE\nINICIALIZADO MI state para solucionar esto declaro mi state como un objeto vacio;\ny por buenas practicas hare esto como 1ra linea de código dentro de mi bloque\n\nManejo de estado\nHasta esta clase todos los componentes han obtenido su información a través de props que vienen desde afuera\n(otros componentes) pero hay otra manera en la que los componentes pueden producir su propia información y guardarla\npara ser consumida o pasada a otros componentes a través de sus props. La clave está en que la información del state\na otros componentes pasará en una sola dirección y podrá ser consumida pero no modificada.\n\nPara guardar la información en el estado se usa una función de la clase component llamada setState\na la cual se le debe pasar un objeto con la información que se quiere guardar.\nAunque no se ve, la información está siendo guardada en dos sitios. Cada input guarda su propio valor\ny al tiempo la está guardando en setState, lo cual no es ideal. Para solucionarlo hay que modificar\nlos inputs de un estado de no controlados a controlados.\n\n*/\n\nclass BadgeForm extends React.Component {\n    // ademas  de esta manera pasamos de modo NO CONTROLADO A CONTROLADO OSEA PODEMOS MNAIPULAR LOS INPUTS COMO PARAMETROS POR DEFECTO!\n    // COMO LO ESTAMOS HACIENDO AQUI! <<< state = { firstname: 'Daniela', }; >>> // inicializo a state como un objeto vacio para evitar el TypeError!\n    //state = {};\n    /*handle_change = e => {\n        console.log({\n            name: e.target.name,\n            value: e.target.value\n        })\n        \n        //setstate me permite poder capturar y gguardar la inofrmacion del input o objeto fritsname toma como 1er parametrp el objeto a guradra osea ne este caso firstname\n        this.setState({\n            //firstname: e.target.value, // hastaaqui solo tenemos un state para el campo firstname si dejamos esto asi todos los campos restantes se guardaran en el campo firstname y no quiero eso, quiero que cada campo tenga su propio state!\n            [e.target.name]: e.target.value, // aqui soluciono el problema anterior es un diccionario donde key=name y value=input de cada name\n        })\n    };*/\n    handle_click = e => {\n        console.log('click ya!')\n    }\n    handle_sub = e => {\n        e.preventDefault(); // prevengo que le form se refresco y me borre los datos despúes de hacer click!\n        console.log('form was submit!')\n        console.log(this.state) // aqui imprimiré el estado de los inputs que el user escriba!\n    }\n    render() {\n        return (<div>\n            <h1>NEW ATTENDANT</h1>\n            <form onSubmit={this.handle_sub}>\n                <div className='form-group'>\n                    <label htmlFor=''>First Name</label>\n                    <input onChange={this.props.onChange} className='form-control' type='text' name='firstname' value={this.state.firstname}></input>\n                </div>\n                <div className='form-group'>\n                    <label htmlFor=''>Last Name</label>\n                    <input onChange={this.props.onChange} className='form-control' type='text' name='lastname' value={this.props.lastname}></input>\n                </div>\n                <div className='form-group'>\n                    <label htmlFor=''>Email</label>\n                    <input onChange={this.props.onChange} className='form-control' type='email' name='email' value={this.state.email}></input>\n                </div>\n                <div className='form-group'>\n                    <label htmlFor=''>Job Title</label>\n                    <input onChange={this.props.onChange} className='form-control' type='text' name='jobtitle' value={this.state.jobtitle}></input>\n                </div>\n                <div className='form-group'>\n                    <label htmlFor=''>Twitter</label>\n                    <input onChange={this.props.onChange} className='form-control' type='text' name='twitter' value={this.state.twitter}></input>\n                </div>\n                <buttom onClick={this.handle_click} className='btn btn-primary'>Save</buttom>\n            </form>\n        </div>)\n    }\n}\nexport default BadgeForm;"]},"metadata":{},"sourceType":"module"}