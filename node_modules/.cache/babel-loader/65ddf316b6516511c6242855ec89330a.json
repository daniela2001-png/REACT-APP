{"ast":null,"code":"var _jsxFileName = \"/home/danibella/Desktop/MIS PROYECTOS PERSONALES/APP_REACT/platzi-badges/src/index.js\";\n// const element = document.createElement('h1');\n// element.innerText = 'Hello, Platzi Badges!';\n// const container = document.getElementById('app');\n// container.appendChild(element);\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction name(yo) {\n  return yo.name + yo.apellido;\n}\n\nvar yo = {\n  name: 'daniela',\n  apellido: 'morales'\n};\nvar element = React.createElement(\"h1\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18\n  },\n  __self: this\n}, \"Hello, \", name(yo));\nvar container = document.getElementById('app'); // ReactDOM.render(__qué__, __dónde__);\n\nReactDOM.render(element, container);\n/*\nconclusion: React y ReactDOM trabajarán en conjunto.\n\n- React como análogo a createElement\n- ReactDOM a appendChild\n- ReactDOM.render() toma dos argumentos: Qué queremos renderizar y dónde lo queremos renderizar.\n\nSiempre que escribas JSX es requisito importar React.\n\n\n2da conclusion:\nJSX:\n\nJSX es una extensión de JavaScript creada por Facebook para el uso con la biblioteca React. Sirve de preprocesador (como Sass o Stylus a CSS) y transforma el código generado con React a JavaScript.\n\nJSX tiene su alternativa que es React.createElement pero es preferible JSX porque es mucho más legible y expresivo. Ambos tienen el mismo poder y la misma capacidad.\n\nReact.createElement recibe 3 argumentos:\n\nEl tipo de elemento que estamos creando\nsus atributos o props\ny el children que es el contenido.\nEjemplo:\nReact.createElement(‘a’, { href: ‘https://platzi.com’ }, ‘Ir a Platzi’);\n\nEn JSX se utilizan las llaves para introducir variables o expresiones de Javascript. Lo que sea que esté adentro se va a evaluar y su resultado se mostrará en pantalla.\n\nLas expresiones pueden ser llamadas a otras funciones, cálculos matemáticos, etc. Si las expresiones son false, 0, null, undefined, entre otros, no se verán.\n\n*/","map":{"version":3,"sources":["/home/danibella/Desktop/MIS PROYECTOS PERSONALES/APP_REACT/platzi-badges/src/index.js"],"names":["React","ReactDOM","name","yo","apellido","element","container","document","getElementById","render"],"mappings":";AAAA;AACA;AAEA;AAEA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;;AAEA,SAASC,IAAT,CAAcC,EAAd,EAAkB;AACd,SAAOA,EAAE,CAACD,IAAH,GAAUC,EAAE,CAACC,QAApB;AACH;;AACD,IAAMD,EAAE,GAAG;AACPD,EAAAA,IAAI,EAAE,SADC;AAEPE,EAAAA,QAAQ,EAAE;AAFH,CAAX;AAIA,IAAMC,OAAO,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAYH,IAAI,CAACC,EAAD,CAAhB,CAAhB;AAIA,IAAMG,SAAS,GAAGC,QAAQ,CAACC,cAAT,CAAwB,KAAxB,CAAlB,C,CAEA;;AACAP,QAAQ,CAACQ,MAAT,CAAgBJ,OAAhB,EAAyBC,SAAzB;AAEA","sourcesContent":["// const element = document.createElement('h1');\n// element.innerText = 'Hello, Platzi Badges!';\n\n// const container = document.getElementById('app');\n\n// container.appendChild(element);\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction name(yo) {\n    return yo.name + yo.apellido\n}\nconst yo = {\n    name: 'daniela',\n    apellido: 'morales'\n}\nconst element = <h1>Hello, {name(yo)}</h1>;\n\n\n\nconst container = document.getElementById('app');\n\n// ReactDOM.render(__qué__, __dónde__);\nReactDOM.render(element, container);\n\n/*\nconclusion: React y ReactDOM trabajarán en conjunto.\n\n- React como análogo a createElement\n- ReactDOM a appendChild\n- ReactDOM.render() toma dos argumentos: Qué queremos renderizar y dónde lo queremos renderizar.\n\nSiempre que escribas JSX es requisito importar React.\n\n\n2da conclusion:\nJSX:\n\nJSX es una extensión de JavaScript creada por Facebook para el uso con la biblioteca React. Sirve de preprocesador (como Sass o Stylus a CSS) y transforma el código generado con React a JavaScript.\n\nJSX tiene su alternativa que es React.createElement pero es preferible JSX porque es mucho más legible y expresivo. Ambos tienen el mismo poder y la misma capacidad.\n\nReact.createElement recibe 3 argumentos:\n\nEl tipo de elemento que estamos creando\nsus atributos o props\ny el children que es el contenido.\nEjemplo:\nReact.createElement(‘a’, { href: ‘https://platzi.com’ }, ‘Ir a Platzi’);\n\nEn JSX se utilizan las llaves para introducir variables o expresiones de Javascript. Lo que sea que esté adentro se va a evaluar y su resultado se mostrará en pantalla.\n\nLas expresiones pueden ser llamadas a otras funciones, cálculos matemáticos, etc. Si las expresiones son false, 0, null, undefined, entre otros, no se verán.\n\n*/"]},"metadata":{},"sourceType":"module"}